//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./warehouse_types');
//HELPER FUNCTIONS AND STRUCTURES

var Warehouse_getManufacturerById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Warehouse_getManufacturerById_args.prototype = {};
Warehouse_getManufacturerById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_getManufacturerById_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_getManufacturerById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_getManufacturerById_result = function(args) {
  this.success = null;
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.EntityNotFoundError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Manufacturer(args.success);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_getManufacturerById_result.prototype = {};
Warehouse_getManufacturerById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Manufacturer();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.EntityNotFoundError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_getManufacturerById_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_getManufacturerById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_findManufacturers_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.ManufacturerInfo(args.info);
    }
  }
};
Warehouse_findManufacturers_args.prototype = {};
Warehouse_findManufacturers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ManufacturerInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_findManufacturers_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_findManufacturers_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_findManufacturers_result = function(args) {
  this.success = null;
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.EntityNotFoundError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Manufacturer]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_findManufacturers_result.prototype = {};
Warehouse_findManufacturers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.Manufacturer();
          elem3.read(input);
          this.success.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.EntityNotFoundError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_findManufacturers_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_findManufacturers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter4 in this.success) {
      if (this.success.hasOwnProperty(iter4)) {
        iter4 = this.success[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_insertManufacturer_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.ManufacturerInfo(args.info);
    }
  }
};
Warehouse_insertManufacturer_args.prototype = {};
Warehouse_insertManufacturer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ManufacturerInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_insertManufacturer_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_insertManufacturer_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_insertManufacturer_result = function(args) {
  this.success = null;
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.ValidationError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_insertManufacturer_result.prototype = {};
Warehouse_insertManufacturer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.ValidationError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_insertManufacturer_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_insertManufacturer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_updateManufacturerById_args = function(args) {
  this.id = null;
  this.info = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.ManufacturerInfo(args.info);
    }
  }
};
Warehouse_updateManufacturerById_args.prototype = {};
Warehouse_updateManufacturerById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ManufacturerInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_updateManufacturerById_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_updateManufacturerById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 2);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_updateManufacturerById_result = function(args) {
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.EntityNotFoundError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_updateManufacturerById_result.prototype = {};
Warehouse_updateManufacturerById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.EntityNotFoundError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_updateManufacturerById_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_updateManufacturerById_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_deleteManufacturer_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.ManufacturerInfo(args.info);
    }
  }
};
Warehouse_deleteManufacturer_args.prototype = {};
Warehouse_deleteManufacturer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ManufacturerInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_deleteManufacturer_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_deleteManufacturer_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_deleteManufacturer_result = function(args) {
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.EntityNotFoundError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_deleteManufacturer_result.prototype = {};
Warehouse_deleteManufacturer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.EntityNotFoundError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_deleteManufacturer_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_deleteManufacturer_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_getItemById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Warehouse_getItemById_args.prototype = {};
Warehouse_getItemById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_getItemById_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_getItemById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_getItemById_result = function(args) {
  this.success = null;
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.EntityNotFoundError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Item(args.success);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_getItemById_result.prototype = {};
Warehouse_getItemById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Item();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.EntityNotFoundError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_getItemById_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_getItemById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_findItems_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.ItemInfo(args.info);
    }
  }
};
Warehouse_findItems_args.prototype = {};
Warehouse_findItems_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ItemInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_findItems_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_findItems_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_findItems_result = function(args) {
  this.success = null;
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.EntityNotFoundError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Item]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_findItems_result.prototype = {};
Warehouse_findItems_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.Item();
          elem8.read(input);
          this.success.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.EntityNotFoundError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_findItems_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_findItems_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_insertItem_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.ItemInfo(args.info);
    }
  }
};
Warehouse_insertItem_args.prototype = {};
Warehouse_insertItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ItemInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_insertItem_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_insertItem_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_insertItem_result = function(args) {
  this.success = null;
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.ValidationError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_insertItem_result.prototype = {};
Warehouse_insertItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.ValidationError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_insertItem_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_insertItem_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_updateItemById_args = function(args) {
  this.id = null;
  this.info = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.ItemInfo(args.info);
    }
  }
};
Warehouse_updateItemById_args.prototype = {};
Warehouse_updateItemById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ItemInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_updateItemById_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_updateItemById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 2);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_updateItemById_result = function(args) {
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.EntityNotFoundError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_updateItemById_result.prototype = {};
Warehouse_updateItemById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.EntityNotFoundError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_updateItemById_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_updateItemById_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_deleteItem_args = function(args) {
  this.info = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.ItemInfo(args.info);
    }
  }
};
Warehouse_deleteItem_args.prototype = {};
Warehouse_deleteItem_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.ItemInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_deleteItem_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_deleteItem_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_deleteItem_result = function(args) {
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.EntityNotFoundError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_deleteItem_result.prototype = {};
Warehouse_deleteItem_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.EntityNotFoundError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_deleteItem_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_deleteItem_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_prepareOrder_args = function(args) {
  this.user = null;
  this.order = null;
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.UserInfo(args.user);
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = Thrift.copyList(args.order, [ttypes.ItemInfo]);
    }
  }
};
Warehouse_prepareOrder_args.prototype = {};
Warehouse_prepareOrder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.UserInfo();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.order = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.ItemInfo();
          elem13.read(input);
          this.order.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_prepareOrder_args.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_prepareOrder_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.order.length);
    for (var iter14 in this.order) {
      if (this.order.hasOwnProperty(iter14)) {
        iter14 = this.order[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Warehouse_prepareOrder_result = function(args) {
  this.error = null;
  this.error2 = null;
  if (args instanceof ttypes.DatabaseError) {
    this.error = args;
    return;
  }
  if (args instanceof ttypes.EntityNotFoundError) {
    this.error2 = args;
    return;
  }
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error2 !== undefined && args.error2 !== null) {
      this.error2 = args.error2;
    }
  }
};
Warehouse_prepareOrder_result.prototype = {};
Warehouse_prepareOrder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new ttypes.DatabaseError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error2 = new ttypes.EntityNotFoundError();
        this.error2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Warehouse_prepareOrder_result.prototype.write = function(output) {
  output.writeStructBegin('Warehouse_prepareOrder_result');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.error2 !== null && this.error2 !== undefined) {
    output.writeFieldBegin('error2', Thrift.Type.STRUCT, 2);
    this.error2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WarehouseClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
WarehouseClient.prototype = {};
WarehouseClient.prototype.seqid = function() { return this._seqid; };
WarehouseClient.prototype.new_seqid = function() { return this._seqid += 1; };

WarehouseClient.prototype.getManufacturerById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getManufacturerById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getManufacturerById(id);
  }
};

WarehouseClient.prototype.send_getManufacturerById = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new Warehouse_getManufacturerById_args(params);
  try {
    output.writeMessageBegin('getManufacturerById', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_getManufacturerById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_getManufacturerById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getManufacturerById failed: unknown result');
};

WarehouseClient.prototype.findManufacturers = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findManufacturers(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findManufacturers(info);
  }
};

WarehouseClient.prototype.send_findManufacturers = function(info) {
  var output = new this.pClass(this.output);
  var params = {
    info: info
  };
  var args = new Warehouse_findManufacturers_args(params);
  try {
    output.writeMessageBegin('findManufacturers', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_findManufacturers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_findManufacturers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findManufacturers failed: unknown result');
};

WarehouseClient.prototype.insertManufacturer = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_insertManufacturer(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_insertManufacturer(info);
  }
};

WarehouseClient.prototype.send_insertManufacturer = function(info) {
  var output = new this.pClass(this.output);
  var params = {
    info: info
  };
  var args = new Warehouse_insertManufacturer_args(params);
  try {
    output.writeMessageBegin('insertManufacturer', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_insertManufacturer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_insertManufacturer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('insertManufacturer failed: unknown result');
};

WarehouseClient.prototype.updateManufacturerById = function(id, info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateManufacturerById(id, info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateManufacturerById(id, info);
  }
};

WarehouseClient.prototype.send_updateManufacturerById = function(id, info) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    info: info
  };
  var args = new Warehouse_updateManufacturerById_args(params);
  try {
    output.writeMessageBegin('updateManufacturerById', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_updateManufacturerById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_updateManufacturerById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  callback(null);
};

WarehouseClient.prototype.deleteManufacturer = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteManufacturer(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteManufacturer(info);
  }
};

WarehouseClient.prototype.send_deleteManufacturer = function(info) {
  var output = new this.pClass(this.output);
  var params = {
    info: info
  };
  var args = new Warehouse_deleteManufacturer_args(params);
  try {
    output.writeMessageBegin('deleteManufacturer', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_deleteManufacturer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_deleteManufacturer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  callback(null);
};

WarehouseClient.prototype.getItemById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getItemById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getItemById(id);
  }
};

WarehouseClient.prototype.send_getItemById = function(id) {
  var output = new this.pClass(this.output);
  var params = {
    id: id
  };
  var args = new Warehouse_getItemById_args(params);
  try {
    output.writeMessageBegin('getItemById', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_getItemById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_getItemById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getItemById failed: unknown result');
};

WarehouseClient.prototype.findItems = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findItems(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findItems(info);
  }
};

WarehouseClient.prototype.send_findItems = function(info) {
  var output = new this.pClass(this.output);
  var params = {
    info: info
  };
  var args = new Warehouse_findItems_args(params);
  try {
    output.writeMessageBegin('findItems', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_findItems = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_findItems_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findItems failed: unknown result');
};

WarehouseClient.prototype.insertItem = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_insertItem(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_insertItem(info);
  }
};

WarehouseClient.prototype.send_insertItem = function(info) {
  var output = new this.pClass(this.output);
  var params = {
    info: info
  };
  var args = new Warehouse_insertItem_args(params);
  try {
    output.writeMessageBegin('insertItem', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_insertItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_insertItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('insertItem failed: unknown result');
};

WarehouseClient.prototype.updateItemById = function(id, info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateItemById(id, info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateItemById(id, info);
  }
};

WarehouseClient.prototype.send_updateItemById = function(id, info) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    info: info
  };
  var args = new Warehouse_updateItemById_args(params);
  try {
    output.writeMessageBegin('updateItemById', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_updateItemById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_updateItemById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  callback(null);
};

WarehouseClient.prototype.deleteItem = function(info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteItem(info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteItem(info);
  }
};

WarehouseClient.prototype.send_deleteItem = function(info) {
  var output = new this.pClass(this.output);
  var params = {
    info: info
  };
  var args = new Warehouse_deleteItem_args(params);
  try {
    output.writeMessageBegin('deleteItem', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_deleteItem = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_deleteItem_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  callback(null);
};

WarehouseClient.prototype.prepareOrder = function(user, order, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_prepareOrder(user, order);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_prepareOrder(user, order);
  }
};

WarehouseClient.prototype.send_prepareOrder = function(user, order) {
  var output = new this.pClass(this.output);
  var params = {
    user: user,
    order: order
  };
  var args = new Warehouse_prepareOrder_args(params);
  try {
    output.writeMessageBegin('prepareOrder', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

WarehouseClient.prototype.recv_prepareOrder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Warehouse_prepareOrder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.error2) {
    return callback(result.error2);
  }
  callback(null);
};
var WarehouseProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
WarehouseProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
WarehouseProcessor.prototype.process_getManufacturerById = function(seqid, input, output) {
  var args = new Warehouse_getManufacturerById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getManufacturerById.length === 1) {
    Q.fcall(this._handler.getManufacturerById.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new Warehouse_getManufacturerById_result({success: result});
      output.writeMessageBegin("getManufacturerById", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result = new Warehouse_getManufacturerById_result(err);
        output.writeMessageBegin("getManufacturerById", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getManufacturerById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getManufacturerById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result_obj = new Warehouse_getManufacturerById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getManufacturerById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getManufacturerById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_findManufacturers = function(seqid, input, output) {
  var args = new Warehouse_findManufacturers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findManufacturers.length === 1) {
    Q.fcall(this._handler.findManufacturers.bind(this._handler),
      args.info
    ).then(function(result) {
      var result_obj = new Warehouse_findManufacturers_result({success: result});
      output.writeMessageBegin("findManufacturers", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result = new Warehouse_findManufacturers_result(err);
        output.writeMessageBegin("findManufacturers", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findManufacturers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.findManufacturers(args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result_obj = new Warehouse_findManufacturers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findManufacturers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findManufacturers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_insertManufacturer = function(seqid, input, output) {
  var args = new Warehouse_insertManufacturer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.insertManufacturer.length === 1) {
    Q.fcall(this._handler.insertManufacturer.bind(this._handler),
      args.info
    ).then(function(result) {
      var result_obj = new Warehouse_insertManufacturer_result({success: result});
      output.writeMessageBegin("insertManufacturer", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.ValidationError) {
        result = new Warehouse_insertManufacturer_result(err);
        output.writeMessageBegin("insertManufacturer", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertManufacturer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.insertManufacturer(args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.ValidationError) {
        result_obj = new Warehouse_insertManufacturer_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("insertManufacturer", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertManufacturer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_updateManufacturerById = function(seqid, input, output) {
  var args = new Warehouse_updateManufacturerById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateManufacturerById.length === 2) {
    Q.fcall(this._handler.updateManufacturerById.bind(this._handler),
      args.id,
      args.info
    ).then(function(result) {
      var result_obj = new Warehouse_updateManufacturerById_result({success: result});
      output.writeMessageBegin("updateManufacturerById", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result = new Warehouse_updateManufacturerById_result(err);
        output.writeMessageBegin("updateManufacturerById", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateManufacturerById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateManufacturerById(args.id, args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result_obj = new Warehouse_updateManufacturerById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateManufacturerById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateManufacturerById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_deleteManufacturer = function(seqid, input, output) {
  var args = new Warehouse_deleteManufacturer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteManufacturer.length === 1) {
    Q.fcall(this._handler.deleteManufacturer.bind(this._handler),
      args.info
    ).then(function(result) {
      var result_obj = new Warehouse_deleteManufacturer_result({success: result});
      output.writeMessageBegin("deleteManufacturer", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result = new Warehouse_deleteManufacturer_result(err);
        output.writeMessageBegin("deleteManufacturer", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteManufacturer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteManufacturer(args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result_obj = new Warehouse_deleteManufacturer_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteManufacturer", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteManufacturer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_getItemById = function(seqid, input, output) {
  var args = new Warehouse_getItemById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getItemById.length === 1) {
    Q.fcall(this._handler.getItemById.bind(this._handler),
      args.id
    ).then(function(result) {
      var result_obj = new Warehouse_getItemById_result({success: result});
      output.writeMessageBegin("getItemById", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result = new Warehouse_getItemById_result(err);
        output.writeMessageBegin("getItemById", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getItemById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getItemById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result_obj = new Warehouse_getItemById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getItemById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getItemById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_findItems = function(seqid, input, output) {
  var args = new Warehouse_findItems_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findItems.length === 1) {
    Q.fcall(this._handler.findItems.bind(this._handler),
      args.info
    ).then(function(result) {
      var result_obj = new Warehouse_findItems_result({success: result});
      output.writeMessageBegin("findItems", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result = new Warehouse_findItems_result(err);
        output.writeMessageBegin("findItems", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findItems", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.findItems(args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result_obj = new Warehouse_findItems_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findItems", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findItems", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_insertItem = function(seqid, input, output) {
  var args = new Warehouse_insertItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.insertItem.length === 1) {
    Q.fcall(this._handler.insertItem.bind(this._handler),
      args.info
    ).then(function(result) {
      var result_obj = new Warehouse_insertItem_result({success: result});
      output.writeMessageBegin("insertItem", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.ValidationError) {
        result = new Warehouse_insertItem_result(err);
        output.writeMessageBegin("insertItem", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertItem", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.insertItem(args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.ValidationError) {
        result_obj = new Warehouse_insertItem_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("insertItem", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insertItem", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_updateItemById = function(seqid, input, output) {
  var args = new Warehouse_updateItemById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateItemById.length === 2) {
    Q.fcall(this._handler.updateItemById.bind(this._handler),
      args.id,
      args.info
    ).then(function(result) {
      var result_obj = new Warehouse_updateItemById_result({success: result});
      output.writeMessageBegin("updateItemById", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result = new Warehouse_updateItemById_result(err);
        output.writeMessageBegin("updateItemById", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateItemById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateItemById(args.id, args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result_obj = new Warehouse_updateItemById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateItemById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateItemById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_deleteItem = function(seqid, input, output) {
  var args = new Warehouse_deleteItem_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteItem.length === 1) {
    Q.fcall(this._handler.deleteItem.bind(this._handler),
      args.info
    ).then(function(result) {
      var result_obj = new Warehouse_deleteItem_result({success: result});
      output.writeMessageBegin("deleteItem", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result = new Warehouse_deleteItem_result(err);
        output.writeMessageBegin("deleteItem", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteItem", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.deleteItem(args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result_obj = new Warehouse_deleteItem_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteItem", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteItem", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
WarehouseProcessor.prototype.process_prepareOrder = function(seqid, input, output) {
  var args = new Warehouse_prepareOrder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.prepareOrder.length === 2) {
    Q.fcall(this._handler.prepareOrder.bind(this._handler),
      args.user,
      args.order
    ).then(function(result) {
      var result_obj = new Warehouse_prepareOrder_result({success: result});
      output.writeMessageBegin("prepareOrder", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result = new Warehouse_prepareOrder_result(err);
        output.writeMessageBegin("prepareOrder", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("prepareOrder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.prepareOrder(args.user, args.order, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.DatabaseError || err instanceof ttypes.EntityNotFoundError) {
        result_obj = new Warehouse_prepareOrder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("prepareOrder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("prepareOrder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
