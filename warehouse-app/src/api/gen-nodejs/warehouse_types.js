//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var Manufacturer = module.exports.Manufacturer = function(args) {
  this._id = null;
  this.name = null;
  this.address = null;
  this.phoneNumber = null;
  if (args) {
    if (args._id !== undefined && args._id !== null) {
      this._id = args._id + '';
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _id is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
  }
};
Manufacturer.prototype = {};
Manufacturer.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Manufacturer.prototype.write = function(output) {
  output.writeStructBegin('Manufacturer');
  if (this._id !== null && this._id !== undefined) {
    output.writeFieldBegin('_id', Thrift.Type.STRING, 1);
    output.writeString(this._id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 3);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 4);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Item = module.exports.Item = function(args) {
  this._id = null;
  this.name = null;
  this.manufacturerId = null;
  this.price = null;
  this.arrivalDate = null;
  this.quantity = null;
  if (args) {
    if (args._id !== undefined && args._id !== null) {
      this._id = args._id + '';
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field _id is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.manufacturerId !== undefined && args.manufacturerId !== null) {
      this.manufacturerId = args.manufacturerId;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.arrivalDate !== undefined && args.arrivalDate !== null) {
      if (args.arrivalDate instanceof Date) {
        this.arrivalDate = args.arrivalDate.toISOString();
      } else {
        this.arrivalDate = args.arrivalDate;
      }
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    }
  }
};
Item.prototype = {};
Item.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.manufacturerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.arrivalDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.quantity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Item.prototype.write = function(output) {
  output.writeStructBegin('Item');
  if (this._id !== null && this._id !== undefined) {
    output.writeFieldBegin('_id', Thrift.Type.STRING, 1);
    output.writeString(this._id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.manufacturerId !== null && this.manufacturerId !== undefined) {
    output.writeFieldBegin('manufacturerId', Thrift.Type.STRING, 3);
    output.writeString(this.manufacturerId);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.arrivalDate !== null && this.arrivalDate !== undefined) {
    output.writeFieldBegin('arrivalDate', Thrift.Type.STRING, 5);
    output.writeString(this.arrivalDate);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.I32, 6);
    output.writeI32(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManufacturerInfo = module.exports.ManufacturerInfo = function(args) {
  this._id = null;
  this.name = null;
  this.address = null;
  this.phoneNumber = null;
  if (args) {
    if (args._id !== undefined && args._id !== null) {
      this._id = args._id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
  }
};
ManufacturerInfo.prototype = {};
ManufacturerInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManufacturerInfo.prototype.write = function(output) {
  output.writeStructBegin('ManufacturerInfo');
  if (this._id !== null && this._id !== undefined) {
    output.writeFieldBegin('_id', Thrift.Type.STRING, 1);
    output.writeString(this._id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 3);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 4);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ItemInfo = module.exports.ItemInfo = function(args) {
  this._id = null;
  this.name = null;
  this.manufacturerId = null;
  this.price = null;
  this.arrivalDate = null;
  this.quantity = null;
  if (args) {
    if (args._id !== undefined && args._id !== null) {
      this._id = args._id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.manufacturerId !== undefined && args.manufacturerId !== null) {
      this.manufacturerId = args.manufacturerId;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.arrivalDate !== undefined && args.arrivalDate !== null) {
      this.arrivalDate = args.arrivalDate;
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    }
  }
};
ItemInfo.prototype = {};
ItemInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this._id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.manufacturerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.arrivalDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.quantity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ItemInfo.prototype.write = function(output) {
  output.writeStructBegin('ItemInfo');
  if (this._id !== null && this._id !== undefined) {
    output.writeFieldBegin('_id', Thrift.Type.STRING, 1);
    output.writeString(this._id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.manufacturerId !== null && this.manufacturerId !== undefined) {
    output.writeFieldBegin('manufacturerId', Thrift.Type.STRING, 3);
    output.writeString(this.manufacturerId);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.arrivalDate !== null && this.arrivalDate !== undefined) {
    output.writeFieldBegin('arrivalDate', Thrift.Type.STRING, 5);
    output.writeString(this.arrivalDate);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.I32, 6);
    output.writeI32(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DatabaseError = module.exports.DatabaseError = function(args) {
  Thrift.TException.call(this, "DatabaseError");
  this.name = "DatabaseError";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(DatabaseError, Thrift.TException);
DatabaseError.prototype.name = 'DatabaseError';
DatabaseError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DatabaseError.prototype.write = function(output) {
  output.writeStructBegin('DatabaseError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ValidationError = module.exports.ValidationError = function(args) {
  Thrift.TException.call(this, "ValidationError");
  this.name = "ValidationError";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ValidationError, Thrift.TException);
ValidationError.prototype.name = 'ValidationError';
ValidationError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValidationError.prototype.write = function(output) {
  output.writeStructBegin('ValidationError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityNotFoundError = module.exports.EntityNotFoundError = function(args) {
  Thrift.TException.call(this, "EntityNotFoundError");
  this.name = "EntityNotFoundError";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(EntityNotFoundError, Thrift.TException);
EntityNotFoundError.prototype.name = 'EntityNotFoundError';
EntityNotFoundError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityNotFoundError.prototype.write = function(output) {
  output.writeStructBegin('EntityNotFoundError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

