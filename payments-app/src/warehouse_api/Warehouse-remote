#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from warehouse import Warehouse
from warehouse.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  Manufacturer getManufacturerById(string id)')
    print('   findManufacturers(ManufacturerInfo info)')
    print('  string insertManufacturer(ManufacturerInfo info)')
    print('  void updateManufacturerById(string id, ManufacturerInfo info)')
    print('  void deleteManufacturer(ManufacturerInfo info)')
    print('  Item getItemById(string id)')
    print('   findItems(ItemInfo info)')
    print('  string insertItem(ItemInfo info)')
    print('  void updateItemById(string id, ItemInfo info)')
    print('  void deleteItem(ItemInfo info)')
    print('  void prepareOrder(UserInfo user,  order)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Warehouse.Client(protocol)
transport.open()

if cmd == 'getManufacturerById':
    if len(args) != 1:
        print('getManufacturerById requires 1 args')
        sys.exit(1)
    pp.pprint(client.getManufacturerById(args[0],))

elif cmd == 'findManufacturers':
    if len(args) != 1:
        print('findManufacturers requires 1 args')
        sys.exit(1)
    pp.pprint(client.findManufacturers(eval(args[0]),))

elif cmd == 'insertManufacturer':
    if len(args) != 1:
        print('insertManufacturer requires 1 args')
        sys.exit(1)
    pp.pprint(client.insertManufacturer(eval(args[0]),))

elif cmd == 'updateManufacturerById':
    if len(args) != 2:
        print('updateManufacturerById requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateManufacturerById(args[0], eval(args[1]),))

elif cmd == 'deleteManufacturer':
    if len(args) != 1:
        print('deleteManufacturer requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteManufacturer(eval(args[0]),))

elif cmd == 'getItemById':
    if len(args) != 1:
        print('getItemById requires 1 args')
        sys.exit(1)
    pp.pprint(client.getItemById(args[0],))

elif cmd == 'findItems':
    if len(args) != 1:
        print('findItems requires 1 args')
        sys.exit(1)
    pp.pprint(client.findItems(eval(args[0]),))

elif cmd == 'insertItem':
    if len(args) != 1:
        print('insertItem requires 1 args')
        sys.exit(1)
    pp.pprint(client.insertItem(eval(args[0]),))

elif cmd == 'updateItemById':
    if len(args) != 2:
        print('updateItemById requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateItemById(args[0], eval(args[1]),))

elif cmd == 'deleteItem':
    if len(args) != 1:
        print('deleteItem requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteItem(eval(args[0]),))

elif cmd == 'prepareOrder':
    if len(args) != 2:
        print('prepareOrder requires 2 args')
        sys.exit(1)
    pp.pprint(client.prepareOrder(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
